name: Deploy to GitHub Pages

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# Allow only one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: true

# Sets permissions of the GITHUB_TOKEN
permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: menu-card:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Extract files from Docker image
        run: |
          # Create container from image
          docker create --name temp-container menu-card:latest
          
          # Extract static files
          docker cp temp-container:/usr/share/nginx/html ./dist
          
          # Clean up
          docker rm temp-container
          
          # Verify build
          ls -la ./dist

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./dist

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # Test job (optional)
  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Build and test Docker image
        run: |
          # Build the image
          docker build -t menu-card-test .
          
          # Run container in background
          docker run -d -p 8080:80 --name test-container menu-card-test
          
          # Wait for container to start
          sleep 5
          
          # Test endpoints
          curl -f http://localhost:8080/health || exit 1
          curl -f http://localhost:8080/ || exit 1
          
          # Clean up
          docker stop test-container
          docker rm test-container
